// This is your Prisma schema file,

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Admin {
    id            String    @id @default(cuid())
    email         String    @unique
    password      String // Hashed password
    name          String
    isVerified    Boolean   @default(false)
    twoFactorAuth Boolean   @default(true)
    currentOTP    String?
    otpExpiry     DateTime?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model Category {
    id          String        @id @default(cuid())
    name        String        @unique
    slug        String        @unique
    description String?
    blogs       Blog[]
    library     LibraryItem[]
    templates   Template[]
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    isActive    Boolean       @default(true) // To soft-delete categories if needed
    usageCount  Int           @default(0) // Track how often this category is used
}

model Blog {
    id          String     @id @default(cuid())
    title       String
    slug        String     @unique
    content     String     @db.Text
    excerpt     String?    @db.Text
    coverImage  String?
    status      String     @default("draft")
    views       Int        @default(0)
    categories  Category[]
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    publishedAt DateTime?
}

model LibraryItem {
    id          String      @id @default(cuid())
    title       String
    description String
    type        LibraryType // EBOOK or GUIDE
    pdfUrl      String // S3 URL to PDF file
    coverImage  String // URL to cover image
    price       Decimal // Price in INR
    categories  Category[]
    previewPages Int        @default(3)
    published   Boolean     @default(false)
    downloads   Int         @default(0)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    purchases   Purchase[]
}

model Template {
    id          String       @id @default(cuid())
    title       String
    description String
    type        TemplateType // LETTER or ONELINER
    imageUrl      String // S3 URL to PDF file
    price       Decimal? // Null means free
    categories  Category[]
    published   Boolean      @default(false)
    downloads   Int          @default(0)
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    purchases   Purchase[]
}

model Purchase {
    id            String         @id @default(cuid())
    email         String
    amount        Decimal
    razorpayId    String         @unique
    status        PurchaseStatus
    libraryItem   LibraryItem?   @relation(fields: [libraryItemId], references: [id])
    libraryItemId String?
    template      Template?      @relation(fields: [templateId], references: [id])
    templateId    String?
    downloadUrl   String? // Temporary signed URL for download
    urlExpiresAt  DateTime? // Expiration time for download URL
    createdAt     DateTime       @default(now())
}

model NewsletterSubscriber {
  id         String    @id @default(cuid())
  email      String    @unique
  isVerified Boolean   @default(false)
  token      String?   // For email verification
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

enum LibraryType {
    EBOOK
    GUIDE
}

enum TemplateType {
    LETTER
    ONELINER
}

enum PurchaseStatus {
    PENDING
    COMPLETED
    FAILED
}
