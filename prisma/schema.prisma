generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BuddyRequest {
  id               String             @id @default(cuid())
  type             BuddyRequestType
  name             String
  email            String
  phone            String?
  preferredDate    DateTime
  mode             BuddyMode
  duration         String             // "30" or "60" minutes
  message          String
  extraInfo        String?
  acknowledged     Boolean            @default(true)
  status           BuddyRequestStatus @default(PENDING)
  assignedBuddyId  String?
  calendlyLink     String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  calendlyEventId  String?
  calendlyEventUri String?
  timeSlot         String
  assignedBuddy    Buddy?             @relation(fields: [assignedBuddyId], references: [id])
  payment          BuddyPayment?
}

model Buddy {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  phone         String?
  calendlyLink  String
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  buddyRequests BuddyRequest[]
}

model Admin {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String
  isVerified    Boolean   @default(false)
  twoFactorAuth Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  currentOTP    String?
  otpExpiry     DateTime?
}

model Category {
  id          String        @id @default(cuid())
  name        String        @unique
  slug        String        @unique
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  isActive    Boolean       @default(true)
  usageCount  Int           @default(0)
  blogs       Blog[]        @relation("BlogToCategory")
  library     LibraryItem[] @relation("CategoryToLibraryItem")
  templates   Template[]    @relation("CategoryToTemplate")
}

model Blog {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  content     String
  excerpt     String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  views       Int        @default(0)
  coverImage  String?
  publishedAt DateTime?
  status      String     @default("draft")
  categories  Category[] @relation("BlogToCategory")
}

model LibraryItem {
  id           String      @id @default(cuid())
  title        String
  description  String
  type         LibraryType
  pdfUrl       String
  coverImage   String
  price        Decimal
  published    Boolean     @default(false)
  downloads    Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  previewPages Int         @default(3)
  purchases    Purchase[]
  categories   Category[]  @relation("CategoryToLibraryItem")
}

model Template {
  id          String       @id @default(cuid())
  title       String
  description String
  type        TemplateType
  price       Decimal?
  published   Boolean      @default(false)
  downloads   Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  imageUrl    String
  purchases   Purchase[]
  categories  Category[]   @relation("CategoryToTemplate")
}

model Purchase {
  id            String         @id @default(cuid())
  email         String
  amount        Decimal
  razorpayId    String         @unique
  status        PurchaseStatus
  libraryItemId String?
  templateId    String?
  downloadUrl   String?
  urlExpiresAt  DateTime?
  createdAt     DateTime       @default(now())
  libraryItem   LibraryItem?   @relation(fields: [libraryItemId], references: [id])
  template      Template?      @relation(fields: [templateId], references: [id])
}

model NewsletterSubscriber {
  id         String    @id @default(cuid())
  email      String    @unique
  isVerified Boolean   @default(false)
  token      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isPremium  Boolean   @default(false)
  name       String?
  planEnd    DateTime?
  planStart  DateTime?
  planType   String?
  payments   NewsletterPayment[]
}

model NewsletterPayment {
  id             String         @id @default(cuid())
  subscriberId   String
  razorpayId     String         @unique
  razorpayOrderId String        @unique
  amount         Decimal
  planType       String
  status         PurchaseStatus
  createdAt      DateTime       @default(now())
  subscriber     NewsletterSubscriber @relation(fields: [subscriberId], references: [id])
}

model BuddyPayment {
  id              String         @id @default(cuid())
  buddyRequestId  String         @unique
  razorpayOrderId String         @unique
  razorpayPaymentId String?      @unique
  razorpaySignature String?
  amount          Decimal
  status          PurchaseStatus @default(PENDING)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  buddyRequest    BuddyRequest   @relation(fields: [buddyRequestId], references: [id])
}

enum BuddyRequestType {
  FRIENDLY
  DETAILED
}

enum BuddyRequestStatus {
  PENDING
  ASSIGNED
  COMPLETED
  CANCELLED
}

enum BuddyMode {
  CHAT
  CALL
}

enum LibraryType {
  EBOOK
  GUIDE
}

enum TemplateType {
  LETTER
  ONELINER
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
}
